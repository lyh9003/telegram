name: Telegram Telethon Script

on:
  workflow_dispatch:  # 수동 실행만 허용 (입력 파라미터 제거)
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행

# GitHub Actions에 쓰기 권한 부여
permissions:
  contents: write
  actions: read
  pages: write
  id-token: write

jobs:
  run:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 명시적 토큰 사용
          fetch-depth: 0  # 전체 히스토리 가져오기
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify environment variables
        run: |
          echo "환경변수 확인 중..."
          if [ -z "${{ secrets.API_ID }}" ]; then
            echo "❌ API_ID가 설정되지 않았습니다."
            exit 1
          else
            echo "✅ API_ID 확인됨"
          fi
          
          if [ -z "${{ secrets.API_HASH }}" ]; then
            echo "❌ API_HASH가 설정되지 않았습니다."
            exit 1
          else
            echo "✅ API_HASH 확인됨"
          fi
          
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "❌ OPENAI_API_KEY가 설정되지 않았습니다. GPT 분석을 위해 필수입니다."
            exit 1
          else
            echo "✅ OPENAI_API_KEY 확인됨"
          fi
          
          if [ -z "${{ secrets.SESSION_B64 }}" ]; then
            echo "⚠️ SESSION_B64가 설정되지 않았습니다. 새 세션을 생성해야 할 수 있습니다."
          else
            echo "✅ SESSION_B64 확인됨"
          fi
          
      - name: Restore session file
        run: |
          if [ ! -z "${{ secrets.SESSION_B64 }}" ]; then
            echo "${{ secrets.SESSION_B64 }}" | base64 -d > my_session.session
            echo "세션 파일 복원 완료"
            ls -la my_session.session
          else
            echo "세션 파일이 없습니다. 새 세션을 생성합니다."
            touch my_session.session
          fi
          
      - name: Run script with error handling
        run: |
          echo "스크립트 실행 시작..."
          python tele_main.py || {
            echo "❌ 스크립트 실행 실패"
            echo "현재 디렉토리 파일 목록:"
            ls -la
            echo "Python 패키지 확인:"
            pip list | grep -E "(telethon|pandas|openai)"
            exit 1
          }
          
          # CSV 파일 생성 확인
          if [ -f "telegram_semiconductor_messages.csv" ]; then
            echo "✅ CSV 파일 생성 확인됨"
            wc -l telegram_semiconductor_messages.csv
            head -3 telegram_semiconductor_messages.csv
          else
            echo "❌ CSV 파일이 생성되지 않았습니다."
            echo "현재 디렉토리 내용:"
            ls -la
            # 빈 CSV 파일 생성
            echo "channel,sender_id,date_utc,date_local,labels,message,normalized_text,message_length,summary,keywords,sentiment" > telegram_semiconductor_messages.csv
            echo "빈 CSV 파일을 생성했습니다."
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          
      - name: Backup session file
        run: |
          if [ -f "my_session.session" ] && [ -s "my_session.session" ]; then
            base64 my_session.session > session_backup.txt
            echo "세션 파일 백업 완료"
            echo "세션 파일 크기: $(wc -c < my_session.session) bytes"
          else
            echo "⚠️ 세션 파일이 비어있거나 존재하지 않습니다."
            touch session_backup.txt
          fi
          
      - name: Create artifact for debugging
        if: failure()
        run: |
          echo "디버깅 정보 수집 중..."
          echo "=== 시스템 정보 ===" > debug_info.txt
          uname -a >> debug_info.txt
          echo "" >> debug_info.txt
          
          echo "=== Python 버전 ===" >> debug_info.txt
          python --version >> debug_info.txt
          echo "" >> debug_info.txt
          
          echo "=== 설치된 패키지 ===" >> debug_info.txt
          pip list >> debug_info.txt
          echo "" >> debug_info.txt
          
          echo "=== 환경 변수 (민감정보 제외) ===" >> debug_info.txt
          env | grep -v -E "(SECRET|TOKEN|KEY|HASH)" >> debug_info.txt
          echo "" >> debug_info.txt
          
          echo "=== 파일 목록 ===" >> debug_info.txt
          ls -la >> debug_info.txt
          echo "" >> debug_info.txt
          
          if [ -f "telegram_semiconductor_messages.csv" ]; then
            echo "=== CSV 파일 정보 ===" >> debug_info.txt
            wc -l telegram_semiconductor_messages.csv >> debug_info.txt
            head -5 telegram_semiconductor_messages.csv >> debug_info.txt
          fi
          
      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-info
          path: debug_info.txt
          retention-days: 7
          
      - name: Upload CSV artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: telegram-data
          path: telegram_semiconductor_messages.csv
          retention-days: 30
          
      - name: Commit and push results
        if: success()
        run: |
          # Git 설정
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 현재 브랜치 확인
          echo "현재 브랜치: $(git branch --show-current)"
          
          # 파일 크기 확인
          if [ -f "telegram_semiconductor_messages.csv" ]; then
            file_size=$(wc -c < telegram_semiconductor_messages.csv)
            line_count=$(wc -l < telegram_semiconductor_messages.csv)
            
            echo "CSV 파일 정보: ${file_size} bytes, ${line_count} lines"
            
            # 파일이 너무 크면 경고 (GitHub는 100MB 제한)
            if [ $file_size -gt 25000000 ]; then  # 25MB
              echo "⚠️ 파일이 큽니다 (${file_size} bytes). GitHub 제한(100MB)을 고려해 주세요."
            fi
            
            # 변경사항이 있는지 확인
            git add telegram_semiconductor_messages.csv
            
            if git diff --staged --quiet; then
              echo "ℹ️ 변경사항이 없습니다. 커밋하지 않습니다."
            else
              commit_message="📊 Update telegram data: ${line_count} messages ($(date '+%Y-%m-%d %H:%M:%S UTC')) [skip ci]"
              
              echo "커밋 메시지: $commit_message"
              git commit -m "$commit_message"
              
              # 푸시 시도 (재시도 로직 포함)
              max_retries=3
              retry_count=0
              
              while [ $retry_count -lt $max_retries ]; do
                echo "푸시 시도 $((retry_count + 1))/$max_retries"
                
                if git push origin HEAD:main; then
                  echo "✅ 변경사항을 성공적으로 푸시했습니다."
                  break
                else
                  retry_count=$((retry_count + 1))
                  if [ $retry_count -lt $max_retries ]; then
                    echo "⏳ 푸시 실패. 5초 후 재시도합니다..."
                    sleep 5
                    # 최신 변경사항을 가져와서 충돌 해결 시도
                    git pull --rebase origin main || {
                      echo "⚠️ 리베이스 실패. 단순 머지를 시도합니다."
                      git pull origin main --no-rebase
                    }
                  else
                    echo "❌ 푸시에 실패했습니다. 최대 재시도 횟수 초과."
                    echo "아티팩트를 통해 데이터를 다운로드할 수 있습니다."
                  fi
                fi
              done
            fi
          else
            echo "❌ CSV 파일이 없어서 커밋하지 않습니다."
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "=== 워크플로우 실행 요약 ==="
          echo "🕐 실행 시간: $(date)"
          echo "📊 상태: ${{ job.status }}"
          
          if [ -f "telegram_semiconductor_messages.csv" ]; then
            line_count=$(wc -l < telegram_semiconductor_messages.csv)
            file_size=$(wc -c < telegram_semiconductor_messages.csv)
            echo "📁 생성된 CSV: ${line_count} lines, ${file_size} bytes"
            
            # 데이터 미리보기
            echo ""
            echo "📋 데이터 미리보기 (최근 3개 메시지):"
            if [ $line_count -gt 1 ]; then
              head -1 telegram_semiconductor_messages.csv
              echo "---"
              tail -3 telegram_semiconductor_messages.csv | head -3
            fi
          else
            echo "❌ CSV 파일이 생성되지 않았습니다."
          fi
          
          if [ -f "my_session.session" ]; then
            session_size=$(wc -c < my_session.session)
            echo "🔐 세션 파일: ${session_size} bytes"
          else
            echo "⚠️ 세션 파일이 없습니다."
          fi
          
          echo ""
          echo "💾 아티팩트를 통해 데이터를 다운로드할 수 있습니다."
          echo "🔄 다음 자동 실행: 6시간 후"
